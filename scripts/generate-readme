#!/usr/bin/env node
const fs = require("fs");

try {
    const PKG = JSON.parse(fs.readFileSync("./package.json"));
    const TPL = fs.readFileSync("./README.tpl.md").toString();

    const META_FIELD = "thi.ng";
    const META = PKG[META_FIELD] || {};
    const BRANCH = META.branch || "master";
    const START_YEAR = META.year || 2016;
    const REPO_ID = "thi-ng/umbrella";
    const MAIN_AUTHOR = "Karsten Schmidt";
    const LICENSE = "Apache Software License 2.0";

    const GH_URL = "https://github.com";
    const REPO_URL = `${GH_URL}/${REPO_ID}`;
    const DEMO_URL = "https://demo.thi.ng/umbrella";
    const ASSET_URL = `https://raw.githubusercontent.com/${REPO_ID}/${BRANCH}/assets`;
    const BRANCH_URL = `${REPO_URL}/tree/${BRANCH}`;
    const DOC_URL = "https://docs.thi.ng/umbrella";
    const EX_DIR = "../../examples";

    const RE_PKG = /@thi\.ng\/[a-z0-9-]+/g;
    const RE_USER = /@([a-z0-9_-]+)/gi;
    const RE_PARTIAL = /\$\{([a-z.]+)\}/gi;
    const RE_IS_HEADING = /^#{2,4}\s/;
    const RE_HEADING = /^(#{2,4})\s(.+)/;
    const RE_SLUG = /[^a-z0-9]/gi;
    const PATTERN_TOC = "<!-- TOC -->";
    const PATTERN_NO_TOC = "<!-- NOTOC -->";

    const shortName = (name) => name.split("/")[1];

    const link = (title, href) => `[${title}](${href})`;

    const pkgLink = (name) =>
        link(name, `${BRANCH_URL}/packages/${shortName(name)}`);

    const userLink = (id) => link(`@${id}`, `${GH_URL}/${id}`);

    const asset = (file, alt = "") => `![${alt}](${ASSET_URL}/${file})`;

    const list = (items) => items.map((x) => `- ${x}`).join("\n");

    const packageList = (pkgShortNames, title) => {
        const items = [];
        for (let p of pkgShortNames) {
            try {
                const pkg = JSON.parse(fs.readFileSync(`../${p}/package.json`));
                items.push(
                    pkgLink(pkg.name) +
                    " - " +
                    pkg.description.replace(RE_PKG, pkgLink)
                );
            } catch (_) {
                console.log(`error reading support pkg: ${p.name}`);
            }
        }
        return items.length > 0 ? `### ${title}\n\n${list(items)}` : "";
    };

    const examples = (pkgName) => {
        const examples = [];
        for (let ex of fs.readdirSync(EX_DIR)) {
            try {
                const expkg = JSON.parse(
                    fs.readFileSync(`${EX_DIR}/${ex}/package.json`)
                );
                const meta = expkg[META_FIELD] || {};
                const explicitInclude =
                    Array.isArray(meta.readme) &&
                    meta.readme.includes(shortName(pkgName));
                if (
                    explicitInclude ||
                    (meta.readme === true &&
                        expkg.dependencies &&
                        expkg.dependencies[pkgName])
                ) {
                    const body = [
                        `### ${expkg.name} ${PATTERN_NO_TOC}`,
                        "",
                        meta.screenshot
                            ? asset(meta.screenshot, "screenshot") + "\n"
                            : null,
                        expkg.description ? expkg.description + "\n" : null,
                        link("Live demo", `${DEMO_URL}/${expkg.name}/`) +
                        " | " +
                        link(
                            "Source",
                            `${BRANCH_URL}/examples/${expkg.name}`
                        ),
                        ""
                    ]
                        .filter((x) => x != null)
                        .join("\n");
                    examples.push(body);
                }
            } catch (_) { }
        }
        return examples.length
            ? [
                "## Usage examples",
                "",
                "Several demos in this repo's",
                link("/examples", `${BRANCH_URL}/examples`),
                "directory are using this package.",
                "",
                "A selection:",
                "",
                ...examples
            ].join("\n")
            : null;
    };

    const supportPackages = (pkgName) => {
        const pkgShortName = shortName(pkgName);
        return packageList(
            fs
                .readdirSync("../")
                .filter((x) => x.startsWith(pkgShortName + "-")),
            "Support packages"
        );
    };

    const relatedPackages = (pkgShortNames = []) =>
        packageList(pkgShortNames, "Related packages");

    const packageDesc = (pkg) => {
        const desc = pkg.description.replace(RE_PKG, pkgLink) + ".";
        const parent = (pkg[META_FIELD] || {}).parent;
        return parent && desc.indexOf(parent) == -1
            ? `${desc} This is a support package for ${pkgLink(parent)}.`
            : desc;
    };

    const packageDeps = (pkg) => {
        const deps = Object.keys(pkg.dependencies || {})
            .sort()
            .map(pkgLink);
        return deps.length ? list(deps) : "None";
    };

    const packageStatus = (status = "stable") => {
        const statuses = {
            alpha: " - bleeding edge / work-in-progress",
            beta: " - possibly breaking changes forthcoming",
            stable: " - used in production",
            refactor: " - undergoing major refactoring"
        };
        return [
            "### Status",
            "",
            `**${status.toUpperCase()}**${statuses[status] || ""}`
        ].join("\n");
    };

    const blogPosts = (posts) => {
        if (!posts) return;
        return [
            "### Blog posts",
            "",
            list(posts.map(({ title, url }) => link(title, url)))
        ].join("\n");
    };

    const docLink = (pkgName) =>
        link("Generated API docs", `${DOC_URL}/${shortName(pkgName)}/`);

    const authors = () => {
        try {
            return fs
                .readFileSync("./AUTHORS.md")
                .toString()
                .replace(RE_USER, (_, id) => userLink(id));
        } catch (_) { }
        return MAIN_AUTHOR;
    };

    const copyright = (startYear, author) => {
        const now = new Date().getFullYear();
        return startYear < now
            ? `${startYear} - ${now} ${author}`
            : `${startYear} ${author}`;
    };

    const src = "àáäâãåèéëêìíïîòóöôùúüûñçßÿœæŕśńṕẃǵǹḿǘẍźḧ·_";
    const dest = "aaaaaaeeeeiiiioooouuuuncsyoarsnpwgnmuxzh--";
    const re = new RegExp(src.split("").join("|"), "g");
    // based on @thi.ng/strings, adapted for GH
    const slugify = (str) => {
        return str
            .toLowerCase()
            .replace(/\s/g, "-")
            .replace(re, (c) => dest[src.indexOf(c)])
            .replace(/[^\w\-]+/g, "")
            .replace(/^-+/, "")
            .replace(/-+$/, "");
    };

    const injectTOC = (readme) => {
        const toc = readme
            .split("\n")
            .filter(
                (line) =>
                    RE_IS_HEADING.test(line) &&
                    line.indexOf(PATTERN_NO_TOC) === -1
            )
            .map((hd) => {
                const [_, level, title] = RE_HEADING.exec(hd);
                const indent = "      ".substr(0, (level.length - 2) * 2);
                const href = "#" + slugify(title);
                return `${indent}- ${link(title, href)}`;
            })
            .join("\n");
        return readme.replace(PATTERN_TOC, toc);
    };

    const partials = {
        "pkg.name": PKG.name,
        "pkg.description": () => packageDesc(PKG),
        "pkg.deps": () => packageDeps(PKG),
        status: () => packageStatus(META.status),
        examples: () => examples(PKG.name),
        supportPackages: () => supportPackages(PKG.name),
        relatedPackages: () => relatedPackages(META.related),
        blogPosts: () => blogPosts(META.blog),
        copyright: () => copyright(START_YEAR, MAIN_AUTHOR),
        docLink: () => docLink(PKG.name),
        license: LICENSE,
        authors
    };

    let readme = TPL.replace(RE_PARTIAL, (orig, id) => {
        if (!partials.hasOwnProperty(id)) {
            console.warn(`skipping unsupported tpl ID: "${id}"`);
            return orig;
        }
        const part = partials[id];
        return (typeof part === "function" ? part() : part) || "";
    });

    readme = readme.replace(/\n{3,}/g, "\n\n");
    readme = injectTOC(readme);
    readme = "<!-- This file is generated - DO NOT EDIT! -->\n\n" + readme;

    fs.writeFileSync("./README.md", readme);
} catch (e) {
    console.log(e.message);
    process.exit(1);
}
