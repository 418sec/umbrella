#!/usr/bin/env node
const fs = require("fs");
const rollup = require("rollup");
const cleanup = require("rollup-plugin-cleanup");
const terser = require("terser");
const gz = require("gzip-size");

const camelCase =
    (x) => x.replace(/\-+(\w)/g, (_, c) => c.toUpperCase());

const size =
    (x) => (x / 1024).toFixed(2) + "KB";

const name = process.argv[2];

const deps = process.argv
    .slice(3)
    .reduce(
        (acc, x) => (acc[`@thi.ng/${x}`] = `thi.ng.${camelCase(x)}`, acc),
        {}
    );

const INPUT_OPTS = {
    external: Object.keys(deps),
    input: "./index.js",
    plugins: [
        cleanup({ comments: "some" })
    ]
};

const TERSER_OPTS = {
    compress: true,
    mangle: true,
    ecma: 6
};

const buildVersion =
    async (opts, write = true, compressed = false) => {

        console.log(`bundling (${opts.format}): ${opts.file}`);

        const bundle = await rollup.rollup(INPUT_OPTS);
        const bundleOut = (await bundle.generate(opts)).output[0];
        const bundleCode = bundleOut.code;
        const terserOut = terser.minify(bundleCode, TERSER_OPTS).code;
        const gzSize = gz.sync(terserOut);

        write && fs.writeFileSync(opts.file, compressed ? terserOut : bundleCode);
        opts.sourcemap && fs.writeFileSync(opts.file + ".map", bundleOut.map);

        console.log(`\tsize: ${size(terserOut.length)} / gzipped: ${size(gzSize)}`);
        return { raw: bundleCode.length, min: terserOut.length, gzip: gzSize };
    };

const build =
    async () => {

        !fs.existsSync("lib") && fs.mkdirSync("lib");
        !fs.existsSync(".meta") && fs.mkdirSync(".meta");

        const cjs = await buildVersion(
            {
                file: "lib/index.js",
                format: "cjs",
                // we don't use default exports, so safe to remove interop blocks
                interop: false,
                sourcemap: true,
                sourcemapExcludeSources: true,
            }
        );

        // output disabled, just collect meta data
        const esm = await buildVersion(
            {
                file: "lib/index.es6.js",
                format: "esm",
                interop: false,
            },
            false
        );

        // write minified version
        const umd = await buildVersion(
            {
                file: "lib/index.umd.js",
                format: "umd",
                globals: deps,
                name: `thi.ng.${name}`,
                interop: false,
                sourcemap: true,
                sourcemapExcludeSources: true,
            },
            true,
            true
        );

        fs.writeFileSync(".meta/size.json", JSON.stringify({ esm, cjs, umd }));
    };

build();
