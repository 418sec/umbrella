#!/usr/bin/env node
const fs = require("fs");
const rollup = require("rollup");
const cleanup = require("rollup-plugin-cleanup");
const terser = require("terser");
const gz = require("gzip-size");

const buidAll = process.argv[2] === "all";

const camelCase = (x) => x.replace(/\-+(\w)/g, (_, c) => c.toUpperCase());

const size = (x) => (x / 1024).toFixed(2) + "KB";

const pkg = JSON.parse(fs.readFileSync("./package.json").toString());

const name = camelCase(pkg.name.substr(8));

const deps = Object.keys(pkg.dependencies || {}).reduce(
    (acc, x) => ((acc[x] = `thi.ng.${camelCase(x.substr(8))}`), acc),
    {}
);

const INPUT_OPTS = {
    external: Object.keys(deps),
    input: "./index.js",
    plugins: [cleanup({ comments: "some" })],
};

const TERSER_OPTS = {
    compress: true,
    mangle: true,
    ecma: 2017,
};

const buildVersion = async (opts, write = true, compressed = false) => {
    console.log(`bundling (${opts.format}): ${opts.file}`);

    const bundle = await rollup.rollup(INPUT_OPTS);
    const bundleOut = (await bundle.generate(opts)).output[0];
    const bundleCode = bundleOut.code;
    const terserOut = (await terser.minify(bundleCode, TERSER_OPTS)).code;
    const gzSize = gz.sync(terserOut);

    write && fs.writeFileSync(opts.file, compressed ? terserOut : bundleCode);
    opts.sourcemap &&
        fs.writeFileSync(opts.file + ".map", bundleOut.map.toString());

    console.log(`\tsize: ${size(terserOut.length)} / gzipped: ${size(gzSize)}`);
    return { raw: bundleCode.length, min: terserOut.length, gzip: gzSize };
};

const build = async () => {
    try {
        !fs.existsSync("lib") && fs.mkdirSync("lib");
        !fs.existsSync(".meta") && fs.mkdirSync(".meta");

        let cjs, esm, umd;

        cjs = await buildVersion({
            file: "lib/index.js",
            format: "cjs",
            // we don't use default exports, so safe to remove interop blocks
            interop: false,
            sourcemap: true,
            sourcemapExcludeSources: true,
        });

        if (buidAll) {
            // output disabled, just collect meta data
            esm = await buildVersion(
                {
                    file: "lib/index.es6.js",
                    format: "esm",
                    interop: false,
                },
                false
            );

            // write minified version
            umd = await buildVersion(
                {
                    file: "lib/index.umd.js",
                    format: "umd",
                    globals: deps,
                    name: `thi.ng.${name}`,
                    interop: false,
                    sourcemap: true,
                    sourcemapExcludeSources: true,
                },
                true,
                true
            );
        }

        fs.writeFileSync(".meta/size.json", JSON.stringify({ esm, cjs, umd }));
    } catch (e) {
        console.warn(e);
        process.exit(1);
    }
};

build();
