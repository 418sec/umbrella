import { eqDelta } from "@thi.ng/math";
import * as assert from "assert";
import {
    cogStrategy,
    defuzz,
    DefuzzStrategy,
    firstOfMaximaStrategy,
    gaussian,
    invRamp,
    lastOfMaximaStrategy,
    meanOfMaximaStrategy,
    or,
    ramp,
    triangle,
    variable,
} from "../src";

describe("defuzz", () => {
    it("strategies", () => {
        // https://www.researchgate.net/publication/267041266_Introduction_to_fuzzy_logic
        const food = variable([0, 10], {
            awful: invRamp(1, 3),
            delicious: ramp(7, 9),
        });
        const service = variable([0, 10], {
            poor: gaussian(0, 1.5),
            good: gaussian(5, 1.5),
            excellent: gaussian(10, 1.5),
        });
        const tip = variable([0, 30], {
            low: triangle(0, 5, 10),
            medium: triangle(10, 15, 20),
            high: triangle(20, 25, 30),
        });

        // if service is poor OR food is awful -> tip is low
        // if service is normal -> tip is medium
        // if service is excellent OR food is delicious -> tip is high
        const rules = [
            or({ food: "awful", service: "poor" }, { tip: "low" }),
            or({ service: "good" }, { tip: "medium" }),
            or({ food: "delicious", service: "excellent" }, { tip: "high" }),
        ];

        const testStrategy = (
            id: string,
            strategy: DefuzzStrategy,
            expected: number[]
        ) => {
            // const all = [];
            for (let i = 0, k = 0; i <= 10; i++) {
                for (let j = 0; j <= 10; j++, k++) {
                    let res = defuzz(
                        { food, service },
                        { tip },
                        rules,
                        { food: i, service: j },
                        // trace(strategy)
                        strategy
                    );
                    assert(
                        eqDelta(res.tip, expected[k]),
                        `${id}(${i},${j}): expected: ${expected[k]}, got: ${res.tip}`
                    );
                    // all.push(res.tip.toFixed(2));
                }
            }
            // for (let i = 0; i <= 10; i++) {
            //     console.log(all.slice(i * 11, (i + 1) * 11).join(", "));
            // }
            // console.log("--");
        };

        // prettier-ignore
        const cogResults = [
            4.95, 4.95, 5.55, 7.05, 8.85, 10.35, 10.35, 8.25, 8.25, 11.55, 14.85,
            4.95, 4.95, 5.55, 7.05, 8.85, 10.35, 10.35, 8.25, 8.25, 11.55, 14.85,
            4.95, 4.95, 6.15, 8.25, 12.15, 12.45, 12.45, 11.85, 13.05, 21.75, 22.35,
            4.95, 4.95, 6.45, 13.35, 14.55, 14.85, 15.15, 16.35, 23.25, 24.75, 24.75,
            4.95, 4.95, 6.45, 13.35, 14.55, 14.85, 15.15, 16.35, 23.25, 24.75, 24.75,
            4.95, 4.95, 6.45, 13.35, 14.55, 14.85, 15.15, 16.35, 23.25, 24.75, 24.75,
            4.95, 4.95, 6.45, 13.35, 14.55, 14.85, 15.15, 16.35, 23.25, 24.75, 24.75,
            4.95, 4.95, 6.45, 13.35, 14.55, 14.85, 15.15, 16.35, 23.25, 24.75, 24.75,
            7.35, 7.95, 16.65, 17.85, 17.25, 17.25, 17.55, 21.45, 23.55, 24.75, 24.75,
            14.85, 18.15, 21.45, 21.45, 19.35, 19.35, 20.85, 22.65, 24.15, 24.75, 24.75,
            14.85, 18.15, 21.45, 21.45, 19.35, 19.35, 20.85, 22.65, 24.15, 24.75, 24.75,
        ];
        testStrategy("cog", cogStrategy(), cogResults);

        // prettier-ignore
        const foMaResults = [
            5.10, 5.10, 5.10, 5.10, 5.10, 15.00, 5.10, 5.10, 5.10, 5.10, 5.10,
            5.10, 5.10, 5.10, 5.10, 5.10, 15.00, 5.10, 5.10, 5.10, 5.10, 5.10,
            5.10, 4.20, 2.70, 2.70, 14.10, 15.00, 14.10, 2.70, 2.70, 24.30, 24.90,
            5.10, 4.20, 2.10, 12.30, 14.10, 15.00, 14.10, 12.30, 22.20, 24.30, 24.90,
            5.10, 4.20, 2.10, 12.30, 14.10, 15.00, 14.10, 12.30, 22.20, 24.30, 24.90,
            5.10, 4.20, 2.10, 12.30, 14.10, 15.00, 14.10, 12.30, 22.20, 24.30, 24.90,
            5.10, 4.20, 2.10, 12.30, 14.10, 15.00, 14.10, 12.30, 22.20, 24.30, 24.90,
            5.10, 4.20, 2.10, 12.30, 14.10, 15.00, 14.10, 12.30, 22.20, 24.30, 24.90,
            5.10, 4.20, 22.50, 22.50, 14.10, 15.00, 14.10, 22.50, 22.50, 24.30, 24.90,
            5.10, 24.90, 24.90, 24.90, 24.90, 15.00, 24.90, 24.90, 24.90, 24.90, 24.90,
            5.10, 24.90, 24.90, 24.90, 24.90, 15.00, 24.90, 24.90, 24.90, 24.90, 24.90,
        ];
        testStrategy("first", firstOfMaximaStrategy(), foMaResults);

        // prettier-ignore
        const loMaResults = [
            5.10, 5.10, 5.10, 5.10, 5.10, 15.00, 5.10, 5.10, 5.10, 5.10, 24.90,
            5.10, 5.10, 5.10, 5.10, 5.10, 15.00, 5.10, 5.10, 5.10, 5.10, 24.90,
            5.10, 5.70, 7.50, 7.50, 15.90, 15.00, 15.90, 7.50, 7.50, 25.80, 24.90,
            5.10, 5.70, 7.80, 17.70, 15.90, 15.00, 15.90, 17.70, 27.90, 25.80, 24.90,
            5.10, 5.70, 7.80, 17.70, 15.90, 15.00, 15.90, 17.70, 27.90, 25.80, 24.90,
            5.10, 5.70, 7.80, 17.70, 15.90, 15.00, 15.90, 17.70, 27.90, 25.80, 24.90,
            5.10, 5.70, 7.80, 17.70, 15.90, 15.00, 15.90, 17.70, 27.90, 25.80, 24.90,
            5.10, 5.70, 7.80, 17.70, 15.90, 15.00, 15.90, 17.70, 27.90, 25.80, 24.90,
            5.10, 5.70, 27.30, 27.30, 15.90, 15.00, 15.90, 27.30, 27.30, 25.80, 24.90,
            24.90, 24.90, 24.90, 24.90, 24.90, 15.00, 24.90, 24.90, 24.90, 24.90, 24.90,
            24.90, 24.90, 24.90, 24.90, 24.90, 15.00, 24.90, 24.90, 24.90, 24.90, 24.90,
        ];
        testStrategy("last", lastOfMaximaStrategy(), loMaResults);

        // prettier-ignore
        const meoMaResults = [
            5.10, 5.10, 5.10, 5.10, 5.10, 15.00, 5.10, 5.10, 5.10, 5.10, 15.00,
            5.10, 5.10, 5.10, 5.10, 5.10, 15.00, 5.10, 5.10, 5.10, 5.10, 15.00,
            5.10, 4.95, 5.10, 5.10, 15.00, 15.00, 15.00, 5.10, 5.10, 25.05, 24.90,
            5.10, 4.95, 4.95, 15.00, 15.00, 15.00, 15.00, 15.00, 25.05, 25.05, 24.90,
            5.10, 4.95, 4.95, 15.00, 15.00, 15.00, 15.00, 15.00, 25.05, 25.05, 24.90,
            5.10, 4.95, 4.95, 15.00, 15.00, 15.00, 15.00, 15.00, 25.05, 25.05, 24.90,
            5.10, 4.95, 4.95, 15.00, 15.00, 15.00, 15.00, 15.00, 25.05, 25.05, 24.90,
            5.10, 4.95, 4.95, 15.00, 15.00, 15.00, 15.00, 15.00, 25.05, 25.05, 24.90,
            5.10, 4.95, 24.90, 24.90, 15.00, 15.00, 15.00, 24.90, 24.90, 25.05, 24.90,
            15.00, 24.90, 24.90, 24.90, 24.90, 15.00, 24.90, 24.90, 24.90, 24.90, 24.90,
            15.00, 24.90, 24.90, 24.90, 24.90, 15.00, 24.90, 24.90, 24.90, 24.90, 24.90,
        ];
        testStrategy("mean", meanOfMaximaStrategy(), meoMaResults);

        // console.log(
        //     defuzz(
        //         { food, service },
        //         { tip },
        //         rules,
        //         {
        //             food: 7.32,
        //             service: 7.83,
        //         },
        //         trace(cogStrategy(), 16),
        //         tnormHamacher()
        //     )
        // );
    });
});
