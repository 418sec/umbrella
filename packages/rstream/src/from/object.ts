import { Keys } from "@thi.ng/api";
import { Subscription, subscription } from "../subscription";
import { CommonOpts } from "../api";
import { optsWithID } from "../utils/idgen";

export type StreamObj<T, K extends Keys<T>> = {
    [id in K]-?: Subscription<T[id], T[id]>;
} & {
    __next(x: T): void;
    __done(): void;
};

/**
 * Takes an arbitrary object `src` and optional array of `keys` (else
 * selects all by default). Creates a new object and for each key
 * creates a new stream, seeded with the key's value in `src`. Returns
 * new object of streams.
 *
 * @remarks
 * In addition to the given `keys`, the following special functions will
 * be added to the result object:
 *
 * - `__next()` - takes a new object of same type as `src` and feeds new
 *   values for each key/prop into its respective stream.
 * - `__done()` - calls {@link ISubscriber.done} on all streams
 *
 * The optional `opts` arg is used to specify shared options for *all*
 * streams. If the `id` option isn't provided, each stream will get an
 * autogenerated ID in the form `obj-${keyname}-${counter}`.
 *
 * @example
 * ```ts
 * type Foo = { a?: number; b: string; };
 *
 * const streams = fromObject(<Foo>{ a: 1, b: "foo" })
 *
 * streams.a.subscribe(trace("a"))
 * // a 1
 * streams.b.subscribe(trace("b"))
 * // b foo
 *
 * streams.__next({ b: "bar" })
 * // a undefined
 * // b bar
 * ```
 *
 *
 * @param src
 * @param keys
 * @param opts
 */
export const fromObject = <T, K extends Keys<T>>(
    src: T,
    keys: K[] = <any>Object.keys(src),
    opts?: Partial<CommonOpts>
) => {
    const dest = <StreamObj<T, K>>{
        __next(state) {
            for (let k of keys) {
                dest[k].next(<any>state[k]);
            }
        },
        __done() {
            for (let k of keys) {
                dest[k].done();
            }
        },
    };
    for (let k of keys) {
        dest[k] = <any>subscription(undefined, optsWithID(`obj-${k}`, opts));
        dest[k].next(<any>src[k]);
    }
    return dest;
};
