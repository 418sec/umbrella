import { defmulti } from "@thi.ng/defmulti";
import {
    comp,
    iterator,
    map,
    mapcat,
    mapIndexed,
    partition,
    str,
    transduce,
    wrap,
    partitionBy,
    push
} from "@thi.ng/transducers";
import {
    DEFAULT_GLOBALS,
    DictEntry,
    EntityStatus,
    GlobalParams,
    IGESDocument,
    Type,
    Unit,
    Param
} from "./api";

const padl = (n: number, ch: string) => {
    const buf = new Array(n).fill(ch).join("");
    return (x: any) => (x = x.toString(), x.length < n ? buf.substr(x.length) + x : x);
};

const padr = (n: number, ch: string) => {
    const buf = new Array(n).fill(ch).join("");
    return (x: any) => (x = x.toString(), x.length < n ? x + buf.substr(x.length) : x);
};

const ff = (prec = 3) => (x: number) => x.toFixed(prec);

const $Z2 = padl(2, "0");
const $Z7 = padl(7, "0");
const $F8 = padl(8, " ");
const $STR = (x: any) => (x != null ? (x = x.toString(), `${x.length}H${x}`) : "");
const $SEQ = padl(7, " ");
const $BODY = padr(72, " ");
const $PBODY = padr(64, " ");

export const newDocument = (g?: Partial<GlobalParams>): IGESDocument => {
    const globals = <GlobalParams>{ ...DEFAULT_GLOBALS, ...g };
    const $FF = ff(globals.precision);
    const $PARAM = defmulti<any[], string>((x) => x[1]);
    $PARAM.add(Type.INT, (x) => x[0].toString());
    $PARAM.add(Type.FLOAT, (x) => $FF(x[0]));

    return {
        globals,
        start: ["Generated by @thi.ng/iges"],
        dict: [],
        param: [],
        offsets: {
            S: 0,
            G: 0,
            P: 1,
            D: 0,
        },
        $FF,
        $PARAM,
        $DATE: (d: Date) => $STR([
            d.getUTCFullYear(),
            $Z2(d.getUTCMonth() + 1),
            $Z2(d.getUTCDate()),
            ".",
            $Z2(d.getUTCHours()),
            $Z2(d.getUTCMinutes()),
            $Z2(d.getUTCSeconds())
        ].join(""))
    };
};

export const serialize = (doc: IGESDocument) => [
    formatSection(doc, doc.start, "S", "", ""),
    formatGlobals(doc),
    ...doc.dict,
    ...doc.param,
    formatTerminate(doc)
].join("\n");

const formatLine = (body: string, type: string, i: number) =>
    `${$BODY(body)}${type}${$SEQ(i + 1)}`;

const formatSection = (doc: IGESDocument, items: any[], type: string, d1 = "", d2 = "") => {
    const res = [...iterator(
        mapIndexed(
            (i, x) => formatLine(x + (i < items.length - 1 ? d1 : d2), type, i)
        ),
        items
    )];
    doc.offsets[type] += res.length;
    return res.join("\n");
};

const formatGlobals = (doc: IGESDocument) => {
    const g = doc.globals;
    return formatSection(doc, [
        $STR(g.delimParam),
        $STR(g.delimRecord),
        $STR(g.senderProductID),
        $STR(g.fileName),
        $STR(g.generator),
        $STR(g.generatorVersion),
        g.intBits,
        g.singleMaxPow,
        g.singleDigits,
        g.doubleMaxPow,
        g.doubleDigits,
        $STR(g.receiverProductID),
        doc.$FF(g.modelScale),
        g.units,
        $STR(Unit[g.units]),
        g.numLineWeights,
        doc.$FF(g.maxLineWeight),
        doc.$DATE(g.created || new Date()),
        doc.$FF(1 / Math.pow(10, g.precision)),
        g.maxCoord ? doc.$FF(g.maxCoord) : "",
        $STR(g.author),
        $STR(g.authorOrg),
        g.specVersion,
        g.draftVersion,
        doc.$DATE(g.modified || new Date()),
    ], "G", g.delimParam, g.delimRecord);
};

const formatTerminate = (doc: IGESDocument) =>
    formatLine(
        `S${$Z7(doc.offsets.S)}G${$Z7(doc.offsets.G)}D${$Z7(doc.offsets.D)}P${$Z7(doc.offsets.P - 1)}`,
        "T", 0
    );

const formatStatus = (s: EntityStatus) =>
    transduce(
        map($Z2),
        str(""),
        [
            s.blank || 0,
            s.subord || 0,
            s.usage || 0,
            s.hierarchy || 0
        ]);

const formatDictEntry = (e: DictEntry) =>
    transduce(
        comp(
            map((x) => $F8(x)),
            partition(9),
            mapIndexed((i, x: string[]) => formatLine(x.join(""), "D", i), e.index)
        ),
        push(),
        [
            e.type,
            e.param || 0,
            e.struct || 0,
            e.pattern || 0,
            e.level || 0,
            e.view || 0,
            e.matrix || 0,
            e.labelAssoc || 0,
            formatStatus(e.status || <any>{}),
            //
            e.type,
            e.lineWeight || 0,
            e.color || 0,
            e.lineCount || 1,
            e.form || 0,
            0,
            0,
            e.label || "",
            e.subscript || 0
        ]
    );

const formatParams = (doc: IGESDocument, params: Param[]) => {
    const did = doc.offsets.D + 1;
    const pid = doc.offsets.P;
    const lines = transduce(
        comp(
            map(doc.$PARAM),
            partitionBy(() => {
                let w = 0;
                let flag = false;
                return (p) => {
                    w += p.length + 1;
                    if (w >= 64) {
                        flag = !flag;
                        w = p.length + 1;
                    }
                    return flag;
                };
            }, true),
            map((p) => p.join(doc.globals.delimParam)),
        ),
        push(),
        params);
    const n = lines.length - 1;
    return lines.map(
        (l, i) => {
            const d = i < n ?
                doc.globals.delimParam :
                doc.globals.delimRecord;
            return `${$PBODY(l + d)} ${$Z7(did)}P${$SEQ(i + pid)}`;
        }
    );
};

// type table: page 38 (67)

// page 77 (106)
export const addPolyline2d = (doc: IGESDocument, pts: number[][], closed = false) => {
    const did = doc.offsets.D;
    const pid = doc.offsets.P;
    const params = formatParams(doc, [
        [106, Type.INT],
        [1, Type.INT],
        [pts.length + (closed ? 1 : 0), Type.INT],
        [0, Type.FLOAT],
        ...iterator(
            mapcat<number[], Param>(
                ([x, y]) => [[x, Type.FLOAT], [y, Type.FLOAT]]
            ),
            closed ? wrap(pts, 1, false, true) : pts
        )
    ]);
    doc.offsets.P += params.length;
    doc.offsets.D += 2;
    doc.dict.push(...formatDictEntry(<DictEntry>{
        type: 106,
        form: 11,
        param: pid,
        index: did,
        lineCount: params.length,
    }));
    doc.param.push(...params);
    return doc;
};

export * from "./api";